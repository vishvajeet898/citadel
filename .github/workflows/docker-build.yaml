name: ECR Push

on:
  push:
    tags:
      - v*
      - '!v-eph*'

jobs:
  pre-commit-check:
    name: Run pre-commit checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.22.3'

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install pre-commit
        run: pip install pre-commit

      - name: Run pre-commit on changed files
        run: pre-commit run --all-files

  validate-secret:
    runs-on: ubuntu-latest
    needs: [pre-commit-check]
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get Base Branch of Tag
        id: get-branch
        run: |
          BASE_BRANCH=$(git branch -r --contains ${{ github.ref }} | grep -E 'origin/(main|master)' || echo "skip")
          echo "BASE_BRANCH=$BASE_BRANCH" >> $GITHUB_ENV
      - name: Skip Validation if Not from Main/Master
        if: env.BASE_BRANCH == 'skip'
        run: echo "Skipping validate_secrets as the tag is not from main/master."

      - name: Set up Python
        if: env.BASE_BRANCH != 'skip'
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dependencies
        if: env.BASE_BRANCH != 'skip'
        run: pip install boto3 pyyaml

      - name: Configure AWS Credentials (OIDC)
        if: env.BASE_BRANCH != 'skip'
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::606514307308:role/GitHubActions-SecretReader
          aws-region: ap-south-1

      - name: 🔍 Debug AWS Credentials (Verify Role Assumption)
        if: env.BASE_BRANCH != 'skip'
        run: aws sts get-caller-identity

      - name: Validate AWS Secret
        if: env.BASE_BRANCH != 'skip'
        env:
          SECRET_KEYS: ${{ secrets.SECRET_KEYS }}
        run: python .github/scripts/validate_secrets.py

  build-migrator:
    runs-on: ubuntu-latest
    needs: [validate-secret]
    permissions:
      contents: read
    steps:
    - uses: actions/checkout@v4
    - name: Set Release Version
      run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV

    # Check if this tag is the latest release using GitHub API
    - name: Check if tag is the latest release
      id: check-latest-release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        LATEST_RELEASE=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
          "https://api.github.com/repos/$GITHUB_REPOSITORY/releases/latest" | jq -r .tag_name)

        if [[ "${{ env.RELEASE_VERSION }}" == "$LATEST_RELEASE" ]]; then
          echo "is_latest_release=true" >> $GITHUB_OUTPUT
        else
          echo "is_latest_release=false" >> $GITHUB_OUTPUT
        fi

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-south-1

    - name: Log in to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push migrator image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: citadel-migrate
        IMAGE_TAG: ${{ env.RELEASE_VERSION}}
        DOCKER_FILE: dbmate.Dockerfile
      run: |
        docker build -f $DOCKER_FILE -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

    # Only push to ephemeral ECR if this is the latest release
    - name: Configure AWS Credentials for Ephemeral ECR
      if: steps.check-latest-release.outputs.is_latest_release == 'true'
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_EPHEMERAL }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_EPHEMERAL }}
        aws-region: ap-south-1

    - name: Log in to Ephemeral Amazon ECR
      if: steps.check-latest-release.outputs.is_latest_release == 'true'
      id: login-ecr-ephemeral
      uses: aws-actions/amazon-ecr-login@v1

    - name: Push to Ephemeral ECR
      if: steps.check-latest-release.outputs.is_latest_release == 'true'
      env:
        ECR_REGISTRY: ${{ steps.login-ecr-ephemeral.outputs.registry }}
        ECR_REPOSITORY: ephemeral-common
        IMAGE_TAG: latest-citadel-migrate
      run: |
        docker tag ${{ steps.login-ecr.outputs.registry }}/citadel-migrate:${{ env.RELEASE_VERSION}} $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

    - name: Log out of Amazon ECR
      if: always()
      run: docker logout ${{ steps.login-ecr.outputs.registry }}

  # Similar pattern for other jobs (api, worker, consumer, scheduler)
  # Each would have the same check-latest-release step and conditional ephemeral push
  build-api:
    runs-on: ubuntu-latest
    needs: [validate-secret]
    permissions:
      contents: read
    steps:
    - uses: actions/checkout@v4
    - name: Set Release Version
      run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV

    # Check if this tag is the latest release using GitHub API
    - name: Check if tag is the latest release
      id: check-latest-release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        LATEST_RELEASE=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
          "https://api.github.com/repos/$GITHUB_REPOSITORY/releases/latest" | jq -r .tag_name)

        if [[ "${{ env.RELEASE_VERSION }}" == "$LATEST_RELEASE" ]]; then
          echo "is_latest_release=true" >> $GITHUB_OUTPUT
        else
          echo "is_latest_release=false" >> $GITHUB_OUTPUT
        fi

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-south-1

    - name: Log in to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push api image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: citadel-api
        IMAGE_TAG: ${{ env.RELEASE_VERSION}}
        DOCKER_FILE: Dockerfile
      run: |
        docker build -f $DOCKER_FILE -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

    # Only push to ephemeral ECR if this is the latest release
    - name: Configure AWS Credentials for Ephemeral ECR
      if: steps.check-latest-release.outputs.is_latest_release == 'true'
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_EPHEMERAL }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_EPHEMERAL }}
        aws-region: ap-south-1

    - name: Log in to Ephemeral Amazon ECR
      if: steps.check-latest-release.outputs.is_latest_release == 'true'
      id: login-ecr-ephemeral
      uses: aws-actions/amazon-ecr-login@v1

    - name: Push to Ephemeral ECR
      if: steps.check-latest-release.outputs.is_latest_release == 'true'
      env:
        ECR_REGISTRY: ${{ steps.login-ecr-ephemeral.outputs.registry }}
        ECR_REPOSITORY: ephemeral-common
        IMAGE_TAG: latest-citadel-api
      run: |
        docker tag ${{ steps.login-ecr.outputs.registry }}/citadel-api:${{ env.RELEASE_VERSION}} $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

    - name: Log out of Amazon ECR
      if: always()
      run: docker logout ${{ steps.login-ecr.outputs.registry }}

  build-scheduler:
    runs-on: ubuntu-latest
    needs: [validate-secret]
    permissions:
      contents: read
    steps:
    - uses: actions/checkout@v4
    - name: Set Release Version
      run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV

    # Check if this tag is the latest release using GitHub API
    - name: Check if tag is the latest release
      id: check-latest-release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        LATEST_RELEASE=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
          "https://api.github.com/repos/$GITHUB_REPOSITORY/releases/latest" | jq -r .tag_name)

        if [[ "${{ env.RELEASE_VERSION }}" == "$LATEST_RELEASE" ]]; then
          echo "is_latest_release=true" >> $GITHUB_OUTPUT
        else
          echo "is_latest_release=false" >> $GITHUB_OUTPUT
        fi

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-south-1

    - name: Log in to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push scheduler image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: citadel-scheduler
        IMAGE_TAG: ${{ env.RELEASE_VERSION}}
        DOCKER_FILE: scheduler.Dockerfile
      run: |
        docker build -f $DOCKER_FILE -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

    # Only push to ephemeral ECR if this is the latest release
    - name: Configure AWS Credentials for Ephemeral ECR
      if: steps.check-latest-release.outputs.is_latest_release == 'true'
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_EPHEMERAL }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_EPHEMERAL }}
        aws-region: ap-south-1

    - name: Log in to Ephemeral Amazon ECR
      if: steps.check-latest-release.outputs.is_latest_release == 'true'
      id: login-ecr-ephemeral
      uses: aws-actions/amazon-ecr-login@v1

    - name: Push to Ephemeral ECR
      if: steps.check-latest-release.outputs.is_latest_release == 'true'
      env:
        ECR_REGISTRY: ${{ steps.login-ecr-ephemeral.outputs.registry }}
        ECR_REPOSITORY: ephemeral-common
        IMAGE_TAG: latest-citadel-scheduler
      run: |
        docker tag ${{ steps.login-ecr.outputs.registry }}/citadel-scheduler:${{ env.RELEASE_VERSION}} $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

    - name: Log out of Amazon ECR
      if: always()
      run: docker logout ${{ steps.login-ecr.outputs.registry }}

  build-worker:
    runs-on: ubuntu-latest
    needs: [validate-secret]
    permissions:
      contents: read
    steps:
    - uses: actions/checkout@v4
    - name: Set Release Version
      run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV

    # Check if this tag is the latest release using GitHub API
    - name: Check if tag is the latest release
      id: check-latest-release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        LATEST_RELEASE=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
          "https://api.github.com/repos/$GITHUB_REPOSITORY/releases/latest" | jq -r .tag_name)

        if [[ "${{ env.RELEASE_VERSION }}" == "$LATEST_RELEASE" ]]; then
          echo "is_latest_release=true" >> $GITHUB_OUTPUT
        else
          echo "is_latest_release=false" >> $GITHUB_OUTPUT
        fi

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-south-1

    - name: Log in to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push worker image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: citadel-worker
        IMAGE_TAG: ${{ env.RELEASE_VERSION}}
        DOCKER_FILE: worker.Dockerfile
      run: |
        docker build -f $DOCKER_FILE -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

    # Only push to ephemeral ECR if this is the latest release
    - name: Configure AWS Credentials for Ephemeral ECR
      if: steps.check-latest-release.outputs.is_latest_release == 'true'
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_EPHEMERAL }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_EPHEMERAL }}
        aws-region: ap-south-1

    - name: Log in to Ephemeral Amazon ECR
      if: steps.check-latest-release.outputs.is_latest_release == 'true'
      id: login-ecr-ephemeral
      uses: aws-actions/amazon-ecr-login@v1

    - name: Push to Ephemeral ECR
      if: steps.check-latest-release.outputs.is_latest_release == 'true'
      env:
        ECR_REGISTRY: ${{ steps.login-ecr-ephemeral.outputs.registry }}
        ECR_REPOSITORY: ephemeral-common
        IMAGE_TAG: latest-citadel-worker
      run: |
        docker tag ${{ steps.login-ecr.outputs.registry }}/citadel-worker:${{ env.RELEASE_VERSION}} $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

    - name: Log out of Amazon ECR
      if: always()
      run: docker logout ${{ steps.login-ecr.outputs.registry }}

  build-consumer:
    runs-on: ubuntu-latest
    needs: [validate-secret]
    permissions:
      contents: read
    steps:
    - uses: actions/checkout@v4
    - name: Set Release Version
      run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV

    # Check if this tag is the latest release using GitHub API
    - name: Check if tag is the latest release
      id: check-latest-release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        LATEST_RELEASE=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
          "https://api.github.com/repos/$GITHUB_REPOSITORY/releases/latest" | jq -r .tag_name)

        if [[ "${{ env.RELEASE_VERSION }}" == "$LATEST_RELEASE" ]]; then
          echo "is_latest_release=true" >> $GITHUB_OUTPUT
        else
          echo "is_latest_release=false" >> $GITHUB_OUTPUT
        fi

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-south-1

    - name: Log in to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push consumer image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: citadel-consumer
        IMAGE_TAG: ${{ env.RELEASE_VERSION}}
        DOCKER_FILE: consumer.Dockerfile
      run: |
        docker build -f $DOCKER_FILE -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

    # Only push to ephemeral ECR if this is the latest release
    - name: Configure AWS Credentials for Ephemeral ECR
      if: steps.check-latest-release.outputs.is_latest_release == 'true'
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_EPHEMERAL }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_EPHEMERAL }}
        aws-region: ap-south-1

    - name: Log in to Ephemeral Amazon ECR
      if: steps.check-latest-release.outputs.is_latest_release == 'true'
      id: login-ecr-ephemeral
      uses: aws-actions/amazon-ecr-login@v1

    - name: Push to Ephemeral ECR
      if: steps.check-latest-release.outputs.is_latest_release == 'true'
      env:
        ECR_REGISTRY: ${{ steps.login-ecr-ephemeral.outputs.registry }}
        ECR_REPOSITORY: ephemeral-common
        IMAGE_TAG: latest-citadel-consumer
      run: |
        docker tag ${{ steps.login-ecr.outputs.registry }}/citadel-consumer:${{ env.RELEASE_VERSION}} $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

    - name: Log out of Amazon ECR
      if: always()
      run: docker logout ${{ steps.login-ecr.outputs.registry }}
